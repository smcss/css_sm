// Groups - separates adjacent siblings by equal amount of space.
//
// Can be of two types: group of blocks, and group of inline elements.
//
// By the method of grouping they may be: margin groups and padding
// groups.

// Groups
//
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// ...................... - margin/padding
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// ...................... - margin/padding
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// ...................... - margin/padding
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxx

// Inline Groups
//
// xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx
// xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx
// xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx
// xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx.xxxxxxxxxx
//           |          |          |
//           margin     margin     margin
//           padding    padding    padding

@mixin mg($size)
    & > :nth-child(n+2) // * + *
        margin-top: $size * 1px

@mixin mi($size)
    & > :nth-child(n+2) // * + *
        margin-left: $size * 1px

@mixin pg($size)
    & > :nth-child(n+2) // * + *
        padding-top: $size * 1px

@mixin pi($size)
    & > :nth-child(n+2) // * + *
        padding-left: $size * 1px

@each $size in (1, 2, 3, 4, 5, 10, 15, 20, 25)
    .mg#{$size}
        @include mg($size)
    .mi#{$size}
        @include mi($size)
    .pg#{$size}
        @include pg($size)
    .pi#{$size}
        @include pi($size)
